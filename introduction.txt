What is an algorithm?
    - an algorithm is a set of well defined instructions used to solve a problem

Qualities of a good algorithm:
    - input and output should be precisely defined
    - each step in an algorithm should be clear & unambiguous
    - it should be the most efficient solution for the problem
    - it should not include computer code
    - it should be programming language independent

Example: algorithm to add two numbers

step 1: start
step 2: declare variables n1, n2 and sum
step 3: read values n1 and n2
step 4: add n1, n2 and assign the result to sum
step 5: display sum
step 6: stop



What are data structures?
    - a data structure is a type of storage unit
    - it is used to efficiently store and retrieve data from computer memory
    - a data structure is different from a data type
    - a data structure is a collection of data types arranged in a specific order
    - there are 2 types of data structures:
        -- linear data structure
        -- non-linear data structure

Linear data structure:
    - elements are arranged in a sequence one after the other
    - easy to implement
    - do not scale well
    - examples:
        -- array
        -- stack
        -- queue
        -- linked list

Non-linear data structure:
    - there is no specific sequence between the elements
    - instead elements are arranged in a hierarchical manner,
      where 1 element is connected to one or more elements
    - non-linear data structures are further divided into:
        -- tree: single parent node
        -- graph: multiple parent nodes



Asymptotic Notations:
    - efficiency of an algorithm depends on the time, storage and other resource
    required to execute the algorithm
    - asymptotic notations are used to measure the efficiency of an algorithm

    - big-O notation represents the worst case complexity of an algorithm
    - omega notation represents the best case complexity of an algorithm
    - theta notation represents the average case complexity of an algorithm



Stack:
    - first in last out principle
    - basic operations:
        -- push: add item to the top of stack
        -- pop: remove and return item from the top of stack
        -- peek: get top item of stack
        -- isEmpty: check if stack is empty
        -- isFull: check if stack is full
    - push & pop operations of the stack take constant time O(1)



Queue:
    - first in first out principle
    - basic operations:
        -- enqueue: add item at the end of queue
        -- dequeue: remove and return item from the start of queue
        -- peek: get front-most item of queue
        -- isEmpty: check if queue is empty
        -- isFull: check if queue is full
    - types of queues:
        -- simple queue
        -- circular queue
        -- priority queue
        -- double ended queue
